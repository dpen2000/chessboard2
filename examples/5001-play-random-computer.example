===== id
5001

===== Name
Play Random Computer

===== DescriptionMD
You can integrate chessboardjs2 with the [chess.js library](https://github.com/jhlywa/chess.js) to play against random moves.

===== HTML
<!--
<script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.13.4/chess.js" integrity="sha384-L0SnMpUnYUX6GNzeu549NqRJHDc9gljfSbFwmJFLZRNJiKLrLI+W9Cpw/DgHy5Vu" crossorigin="anonymous"></script>
-->
<script src="js/chess-0.10.2.min.js"></script>
<!-- <div id="myBoard" style="width: 400px"></div> -->
<div id="myBoard"></div>

===== JS
// This example uses the chess.js library:
// https://github.com/jhlywa/chess.js

// NOTE: the game object is separate from the board object
// the game object:
// - controls the state of the game
// - understands how pieces move and what moves are legal
// - knows who's turn it is
// - en passant, castling, draw logic, etc
const game = new Chess()

// the board object is "dumb":
// - reflects the current position
// - handles input events from users
const boardConfig = {
  draggable: true,
  onDragStart: onDragStart,
  onTouchSquare: onTouchSquare,
  onDrop: onDrop,
  onSnapEnd: onSnapEnd,
  position: 'start',
  touchMove: true
}
const board = Chessboard2('myBoard', boardConfig)

function onTouchSquare (square, piece, board) {
  console.log('onTouchSquare:', square, piece, board)
  // board.orientation
  // board.position
  return false
}

function onDragStart (source, piece, position, orientation) {
  // do not pick up pieces if the game is over
  if (game.game_over()) return false

  // only pick up pieces for White
  if (piece.search(/^b/) !== -1) return false
}

function makeRandomMove () {
  var possibleMoves = game.moves()

  // game over
  if (possibleMoves.length === 0) return

  var randomIdx = Math.floor(Math.random() * possibleMoves.length)
  game.move(possibleMoves[randomIdx])
  board.position(game.fen())
}

function onDrop (source, target) {
  // see if the move is legal
  var move = game.move({
    from: source,
    to: target,
    promotion: 'q' // NOTE: always promote to a queen for example simplicity
  })

  // illegal move
  if (move === null) return 'snapback'

  // make random legal move for black
  window.setTimeout(makeRandomMove, 250)
}

// update the board position after the piece snap
// for castling, en passant, pawn promotion
function onSnapEnd () {
  board.position(game.fen())
}
